require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe UsersController, "as admin" do
  render_views

  def mock_user(stubs={})
    @mock_user ||= mock_model(User, stubs).as_null_object
  end
  
  before(:each) do
    user = Factory(:user)
    session[:user_id] = user.id
  end
  
  
  describe "GET edit" do
    it "assigns the requested user as @user" do
      user = User.create!
      @controller.stubs(:current_user).returns(user)
      get :edit, :id => user
      response.should render_template(:edit)
    end
  end
  
  it "should remove login cookie on logout" do
    get :logout
    response.should redirect_to(root_url)
    session[:user_id].should be_nil
  end
  
  
  
  describe "update" do
    describe "with valid params" do
      it "updates the requested user" do
        User.stub(:find) { mock_user(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(user_path(mock_user))
      end

      it "assigns the requested user as @user" do
        User.stub(:find) { mock_user(:update_attributes => true) }
        put :update, :id => "1"
        assigns[:user].should be(mock_user)
      end

      it "redirects to the user" do
        User.stub(:find) { mock_user(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(user_url(mock_user))
      end
    end

    describe "with invalid params" do
      it "re-renders the 'edit' template" do
        user = User.create!
        user.stubs(:valid?).returns(false)
        @controller.stubs(:current_user).returns(user)
        put :update, :id => user
        response.should render_template("edit")
      end
    end
  end
  
end

describe UsersController, "as guest" do
  render_views
  
  def mock_user(stubs={})
    @mock_user ||= mock_model(User, stubs).as_null_object
  end

  describe "GET show" do
    it "assigns the requested user as @user" do
      user = User.create!
      get :show, :id => user
      response.should render_template(:show)      
    end
  end

  describe "POST create" do
    it "redirects when user is valid" do
      User.delete_all
      request.env["omniauth.auth"] = {"provider" => "twitter", "uid" => "42"}
      user = User.new
      user.provider = "twitter"
      user.uid = "42"
      user.save!
      post :create
      response.should redirect_to(root_url)
      session[:user_id].should == user.id
    end
    
    it "creates user when new" do
      User.delete_all
      request.env["omniauth.auth"] = {"provider" => "twitter", "uid" => "42", "user_info" => { "name" => "Foo" }}
      post :create
      response.should redirect_to(edit_user_url(1))
      #assigns[:user].name.should == "Foo"
    end
  end
  
  it "should redirect to /auth/twitter on login action" do
    get :login
    response.should redirect_to("/auth/twitter")
  end

end
